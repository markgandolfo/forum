require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RepliesController, :type => :controller do

  before(:each) do
    @section = FactoryGirl.create(:section)
    @post = @section.posts.create(FactoryGirl.attributes_for(:post))
    @reply = @post.replies.create(FactoryGirl.attributes_for(:reply))

    allow(Section).to receive_messages(find: @section)
  end

  # This should return the minimal set of attributes required to create a valid
  # Reply. As you add validations to Reply, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:reply)
  }

  let(:invalid_attributes) {
    { body: '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RepliesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET show" do
    it "assigns the requested reply as @reply" do
      reply = Reply.create! valid_attributes
      get :show, {:id => reply.to_param, post_id: @post.to_param}, valid_session
      expect(assigns(:reply)).to eq(reply)
    end
  end

  describe "GET new" do
    it "assigns a new reply as @reply" do
      get :new, {post_id: @post.to_param}, valid_session
      expect(assigns(:reply)).to be_a_new(Reply)
    end
  end

  describe "GET edit" do
    it "assigns the requested reply as @reply" do
      reply = Reply.create! valid_attributes
      get :edit, {:id => reply.to_param, post_id: @post.to_param}, valid_session
      expect(assigns(:reply)).to eq(reply)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      login_user

      it "creates a new Reply" do
        expect {
          post :create, {:reply => valid_attributes, post_id: @post.to_param}, valid_session
        }.to change(Reply, :count).by(1)
      end

      it "assigns a newly created reply as @reply" do
        post :create, {:reply => valid_attributes, post_id: @post.to_param}, valid_session
        expect(assigns(:reply)).to be_a(Reply)
        expect(assigns(:reply)).to be_persisted
      end

      it "redirects to the created reply" do
        post :create, {:reply => valid_attributes, post_id: @post.to_param}, valid_session
        expect(response).to redirect_to(@post)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved reply as @reply" do
        post :create, {:reply => invalid_attributes, post_id: @post.to_param}, valid_session
        expect(assigns(:reply)).to be_a_new(Reply)
      end

      it "re-renders the 'new' template" do
        post :create, {:reply => invalid_attributes, post_id: @post.to_param}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      login_user

      before(:each) do
        @reply.update_attribute(:user_id, User.first.id)
      end

      let(:new_attributes) {
        {
          body: Faker::Lorem.words(rand(5..60), false).join(' ') }
      }

      it "updates the requested reply" do
        put :update, {:id => @reply.to_param, post_id: @post.to_param, :reply => new_attributes}, valid_session
        @reply.reload

        expect(@reply.body).to eq(new_attributes[:body])
      end

      it "assigns the requested reply as @reply" do
        put :update, {:id => @reply.to_param, :reply => valid_attributes, post_id: @post.to_param}, valid_session
        expect(assigns(:reply)).to eq(@reply)
      end

      it "redirects to the reply" do
        put :update, {:id => @reply.to_param, :reply => valid_attributes, post_id: @post.to_param}, valid_session
        expect(response).to redirect_to(@post)
      end
    end

    describe "with invalid params" do
      login_user

      before(:each) do
        @reply.update_attribute(:user_id, User.first.id)
      end

      it "assigns the reply as @reply" do
        # @reply = Reply.create! valid_attributes
        put :update, {:id => @reply.to_param, post_id: @post.to_param, :reply => invalid_attributes}, valid_session
        expect(assigns(:reply)).to eq(@reply)
      end

      it "re-renders the 'edit' template" do
        reply = Reply.create! valid_attributes
        put :update, {:id => @reply.to_param, post_id: @post.to_param, :reply => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    describe "as admin user" do
      login_user('admin')

      before(:each) do
        @reply.update_attribute(:user_id, User.first.id)
      end

      it "destroys the requested reply" do
        expect {
          delete :destroy, {:id => @reply.to_param, post_id: @post.to_param}, valid_session
        }.to change(Reply, :count).by(-1)
      end

      it "redirects to the replies list" do
        puts "#{@reply.inspect}"
        puts "#{@post.inspect}"
        delete :destroy, {:id => @reply.to_param, post_id: @post.to_param}, valid_session
        expect(response).to redirect_to(@post)
      end
    end
  end

end
